Step 1: Analyze ElasticSearch API

	•	Task: ElasticSearch APIs to support:
  • Endpoints: create document, update document, get document, delete document, search documents, 
  * Bulk operations: batch indexing, batch updating, batch deleting.
  * list indexes
  * multi-search
  * scroll api
	•	Implementation:
	1.	Read ElasticSearch documentation for detailed API contracts and expected behavior from elasticsearch_api_ref.md in this project.
	2.	Define these APIs in your project as Go interfaces, aligning with the ElasticSearch standards.
	•	Verification:
	•	Write unit tests to validate API endpoint registration.
	•	Mock an HTTP server to validate basic request/response flow.

Step 2: Design an ElasticSearch-Compatible Router

	•	Task: Create a routing layer to support both your existing APIs and ElasticSearch-compatible endpoints.
	•	Implementation:
	1.	Use Go’s http.ServeMux or a third-party router (if allowed).
	2.	Define handlers for ElasticSearch-compatible endpoints.
	3.	Ensure handlers validate requests according to ElasticSearch API.
  run 'make test' to validate changes

func setupRouter() *http.ServeMux {
    mux := http.NewServeMux()
    // Existing APIs
    mux.HandleFunc("/api/document", documentHandler)
    // ElasticSearch APIs
    mux.HandleFunc("/_search", elasticSearchHandler)
    mux.HandleFunc("/_index", elasticIndexHandler)
    return mux
}

	•	Unit Test:
	•	Mock HTTP requests for /api/document and ElasticSearch endpoints (/_search, /_index).
	•	Assert correct routing and response codes.
	•	Explanation: The router ensures seamless integration of new endpoints without affecting existing ones.

  Step 3: Implement ElasticSearch-Compatible Indexing (/_index)

	•	Task: Create a handler for the _index API to index documents in ElasticSearch’s JSON structure.
	•	Implementation:
	1.	Parse the ElasticSearch document format.
	2.	Convert and add the document to your existing indexing system.
run 'make test' to validate changes
	•	Code:

func elasticIndexHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPut && r.Method != http.MethodPost {
        http.Error(w, "Invalid method", http.StatusMethodNotAllowed)
        return
    }
    var doc map[string]interface{}
    if err := json.NewDecoder(r.Body).Decode(&doc); err != nil {
        http.Error(w, "Invalid JSON", http.StatusBadRequest)
        return
    }
    // Convert and index the document
    if err := indexDocument(doc); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    w.WriteHeader(http.StatusCreated)
}

•	Unit Test:
	•	Test valid and invalid requests (e.g., valid JSON, missing fields).
	•	Assert document is correctly indexed into the system.
	•	Explanation:
This handler allows documents in ElasticSearch format to be ingested into your custom indexer.

Step 4: Implement ElasticSearch-Compatible Search (/_search)
Step 4.1: Parse the DSL Query

Task:

	•	Implement logic to parse ElasticSearch’s Query DSL (Domain-Specific Language) format into a Go struct.

Implementation:

	1.	Define a struct to represent supported query types (e.g., match, term, range, etc.).
	2.	Parse incoming JSON into this struct.
  This step ensures the handler can interpret queries in ElasticSearch DSL format.
  Run 'make test' to validate changes


Step 4.2: Map DSL Components to Internal Query Structures

Task:

	•	Translate parsed DSL queries into your internal query representation used by the indexer.

Implementation:

	1.	Define an internal query struct.
	2.	Map supported DSL queries (match, term) to your query struct.



Step 4.3: Execute the Internal Query

Task:

	•	Perform a search using your indexer’s query engine.

Implementation:

	1.	Use the internal query struct to retrieve results from the index.
	2.	Return a result set compatible with ElasticSearch.
	•	This step integrates with the indexer’s existing query engine to retrieve relevant documents.


Step 4.4: Format Results in ElasticSearch-Compatible JSON

Task:

	•	Convert query results into a JSON format expected by ElasticSearch clients.

Implementation:

	1.	Define a struct for the response format.
	2.	Populate the response with the query results.
	•	This ensures clients receive results formatted as if from ElasticSearch.


Step 4.5: Integrate Everything in the Handler

Task:

	•	Combine parsing, mapping, executing, and formatting in the /search endpoint.
func elasticSearchHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Invalid method", http.StatusMethodNotAllowed)
        return
    }
    body, err := io.ReadAll(r.Body)
    if err != nil {
        http.Error(w, "Failed to read body", http.StatusBadRequest)
        return
    }
    searchRequest, err := parseDSLQuery(body)
    if err != nil {
        http.Error(w, "Invalid JSON", http.StatusBadRequest)
        return
    }
    internalQuery := mapToInternalQuery(searchRequest)
    results, err := executeInternalQuery(internalQuery)
    if err != nil {
        http.Error(w, "Search execution failed", http.StatusInternalServerError)
        return
    }
    response := formatElasticSearchResponse(results)
    json.NewEncoder(w).Encode(response)
}

Unit Test:

	•	Mock a full /search request with JSON input and validate the response.





==============

Step 5: Add _bulk API Support

	•	Task: Implement the _bulk API for batch operations (indexing, updating, deleting).
	•	Implementation:
	1.	Parse the bulk operation payload.
	2.	Process each operation sequentially or concurrently.
run 'make test' to validate changes
	•	Code:

  func elasticBulkHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Invalid method", http.StatusMethodNotAllowed)
        return
    }
    operations := parseBulkPayload(r.Body)
    results := processBulkOperations(operations)
    json.NewEncoder(w).Encode(results)
}

•	Unit Test:
	•	Validate bulk payload parsing.
	•	Assert batch operations (index, delete, update) work correctly.
	•	Test edge cases (e.g., empty payload, invalid operation).
	•	Explanation:
This feature allows efficient batch processing, mirroring ElasticSearch behavior.

Step 6: Extend Unit Tests for API Contracts

	•	Task: Validate compatibility with ElasticSearch using comprehensive unit and integration tests.
	•	Implementation:
	•	Write tests to cover all API functionality and edge cases.
	•	Mock ElasticSearch-compatible clients to simulate real-world usage.
	•	Test concurrency, large payloads, and malformed requests.
run 'make test' to validate changes
	•	Code:

  func TestElasticSearchAPI(t *testing.T) {
    // Test cases for each API (_index, _search, _bulk)
    // Assert expected response formats and status codes
}

Step 7: Document API Extensions

	•	Task: Update project documentation to include ElasticSearch-compatible APIs.
	•	Implementation:
	•	Provide examples for using the new APIs.
	•	Document request/response formats and expected behavior.
run 'make test' to validate changes

  Step 8: Dockerize and Validate

	•	Task: Update the Docker setup to run the extended system.
	•	Implementation:
	•	Add scripts to the Makefile for starting the API server and running tests.
run 'make test' to validate changes

Step 9:

	•	Performance: Test throughput with concurrent requests to new APIs.
	•	Error Handling: Ensure comprehensive validation and error responses.
	•	Future Proofing: Use modular code to easily add more ElasticSearch features.

